name: Deploy to AWS Elastic Beanstalk via Docker Hub

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. GitHub 레포지토리 코드를 가져옴
      - name: Checkout
        uses: actions/checkout@v3

      # 2. Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3. Docker 이미지 빌드 및 Docker Hub에 푸시
      - name: Build and push to Docker Hub
        run: |
          # :latest 태그로 빌드
          docker build -t ${{ secrets.DOCKER_IMAGENAME }}:latest .
          # :latest 태그 푸시
          docker push ${{ secrets.DOCKER_IMAGENAME }}:latest

          # 고유한 태그(커밋 ID)로도 빌드하고 푸시 (버전 관리를 위해 좋은 습관)
          docker tag ${{ secrets.DOCKER_IMAGENAME }}:latest ${{ secrets.DOCKER_IMAGENAME }}:${{ github.sha }}
          docker push ${{ secrets.DOCKER_IMAGENAME }}:${{ github.sha }}

      # 4. AWS 접속 정보 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # 5. EB에 배포 (Dockerrun.aws.json 파일을 사용)
      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ secrets.AWS_EB_APPLICATION_NAME }}
          environment_name: ${{ secrets.AWS_EB_ENVIRONMENT_NAME }}
          region: ap-northeast-2
          version_label: ${{ github.sha }}
          # 💡 우리 레포에 있는 Dockerrun.aws.json 파일을 그대로 사용
          deployment_package: Dockerrun.aws.json